{"version":3,"sources":["webpack:///./src/pages/docs/advanced-spring-webflux-integration.mdx","webpack:///./src/layouts/docs.tsx"],"names":["pageTitle","_frontmatter","makeShortcode","name","props","console","warn","Tip","RequiredDependencies","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","boms","groupId","artifactId","dependencies","isMDXComponent","DocsLayout","candidateMdxNodes","useStaticQuery","allMdx","nodes","index","docsIndex","prefix","pageTitleSuffix"],"mappings":"i6CAQaA,EAAY,oCACZC,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAML,EAAc,OACpBM,EAAuBN,EAAc,wBACrCO,EAAc,CAClBT,YACAC,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,EACF,8BACD,OAAO,YAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,cAI5E,kBACE,GAAM,oCACN,MAAS,CACP,SAAY,aAEb,iBAAGC,WAAW,KACb,KAAQ,qCACR,aAAc,8CACd,UAAa,iBACZ,mBAAKA,WAAW,IACf,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,MACR,oBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,oVAlBb,qCAoBA,YAACR,EAAD,CAAKO,QAAQ,OACX,8BAAa,iBAAGC,WAAW,IACvB,KAAQ,4CADC,oBAAb,sCAIF,8RAGA,sBACE,kBAAIA,WAAW,MAAf,2BAAgD,iBAAGA,WAAW,KAC1D,KAAQ,8BADoC,UAAhD,QAE4B,iBAAGA,WAAW,KACtC,KAAQ,oBADgB,QAF5B,gBAKM,iBAAGA,WAAW,KAChB,KAAQ,2BADN,yBALN,0EASA,kBAAIA,WAAW,MAAf,qEACA,kBAAIA,WAAW,MAAf,uEAA4F,0BAAYA,WAAW,MAAvB,OAA5F,uBACA,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,+DADQ,kBAApB,yEAGyC,iBAAGA,WAAW,KACnD,KAAQ,4BAD6B,WAHzC,SAMJ,iBAAGA,WAAW,KACN,KAAQ,gDADhB,aAIE,6JAEA,YAACP,EAAD,CAAsBQ,KAAM,CAAC,CAC3BC,QAAS,uBACTC,WAAY,eACX,CACDD,QAAS,WACTC,WAAY,cACVC,aAAc,CAAC,CACjBF,QAAS,uBACTC,WAAY,yCACVJ,QAAQ,yBACZ,sHAAqG,0BAAYC,WAAW,KAAvB,mBAArG,iRAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,kDAML,0EAAyD,iBAAGA,WAAW,IACnE,KAAQ,kKAD6C,oCAAzD,oHAIA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,q/BA0BL,iGAAgF,0BAAYA,WAAW,KAAvB,aAAhF,iFAC4D,iBAAGA,WAAW,IACtE,KAAQ,+KADgD,oCAD5D,4CAKA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,6zCAkCL,YAACR,EAAD,CAAKO,QAAQ,OACX,sGACJ,iBAAGC,WAAW,IACN,KAAQ,mEADhB,+BADI,SAIJ,iBAAGA,WAAW,IACN,KAAQ,2FADhB,yBAJI,OAYNH,EAAWQ,gBAAiB,G,kCCxL5B,6DA0CeC,IA/B+B,SAACjB,GAAU,IAEpCkB,EACfC,yBAAe,cADjBC,OAAUC,MAkBZ,OACE,kBAAC,IAAD,iBACMrB,EADN,CAEEkB,kBAAmBA,EACnBI,MAAOC,EACPC,OAAO,OACPC,gBAAgB","file":"component---src-pages-docs-advanced-spring-webflux-integration-mdx-e0938468272889a0170e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/minu/IdeaProjects/upstream-armeria/site/src/layouts/docs.tsx\";\nexport const pageTitle = \"Using Armeria with Spring WebFlux\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Tip = makeShortcode(\"Tip\");\nconst RequiredDependencies = makeShortcode(\"RequiredDependencies\");\nconst layoutProps = {\n  pageTitle,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"using-armeria-with-spring-webflux\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#using-armeria-with-spring-webflux\",\n        \"aria-label\": \"using armeria with spring webflux permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Using Armeria with Spring WebFlux`}</h1>\n    <Tip mdxType=\"Tip\">\n      <p>{`Visit `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/line/armeria-examples\"\n        }}>{`armeria-examples`}</a>{` to find a fully working example.`}</p>\n    </Tip>\n    <p>{`Spring framework provides powerful features which are necessary for building a web application, such as\ndependency injection, data binding, AOP, transaction, etc. In addition, if your Spring application integrates\nwith Armeria, you can leverage the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Rich support for Apache `}<a parentName=\"li\" {...{\n          \"href\": \"https://thrift.apache.org/\"\n        }}>{`Thrift`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"https://grpc.io/\"\n        }}>{`gRPC`}</a>{`,\nincluding `}<a parentName=\"li\" {...{\n          \"href\": \"/docs/server-docservice\"\n        }}>{`the fancy web console`}</a>{` that enables you to send Thrift and gRPC requests\nfrom a web browser`}</li>\n      <li parentName=\"ul\">{`Ability to run HTTP REST service and RPC service in the same port`}</li>\n      <li parentName=\"ul\">{`Full HTTP/2 support for both server-side and client-side, including `}<inlineCode parentName=\"li\">{`h2c`}</inlineCode>{` (plaintext HTTP/2)`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\"\n        }}>{`PROXY protocol`}</a>{` support which provides\ninteroperability with load balancers such as `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.haproxy.org/\"\n        }}>{`HAProxy`}</a>{` and\n`}<a parentName=\"li\" {...{\n          \"href\": \"https://aws.amazon.com/elasticloadbalancing/\"\n        }}>{`AWS ELB`}</a></li>\n    </ul>\n    <p>{`Armeria can be plugged in as the underlying HTTP server for a Spring Boot 2 WebFlux application by adding\nthe following dependency:`}</p>\n    <RequiredDependencies boms={[{\n      groupId: 'com.linecorp.armeria',\n      artifactId: 'armeria-bom'\n    }, {\n      groupId: 'io.netty',\n      artifactId: 'netty-bom'\n    }]} dependencies={[{\n      groupId: 'com.linecorp.armeria',\n      artifactId: 'armeria-spring-boot2-webflux-starter'\n    }]} mdxType=\"RequiredDependencies\" />\n    <p>{`The above starter configures Armeria as the HTTP server for WebFlux to run on by referring to `}<inlineCode parentName=\"p\">{`application.yml`}</inlineCode>{`\nwhen the application starts up. A user can customize the server configuration with the same properties\nprovided by Spring Boot as for other servers supported with WebFlux such as Tomcat or Reactor Netty.\nThe following is a simple example for configuring the server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`server:\n  address: 127.0.0.1\n  port: 8080\n`}</code></pre>\n    <p>{`For a user who wants to customize the web server, `}<a parentName=\"p\" {...{\n        \"href\": \"type://ArmeriaServerConfigurator:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/spring/ArmeriaServerConfigurator.html\"\n      }}>{`type://ArmeriaServerConfigurator`}</a>{` is provided.\nThe user can customize the server by defining a bean of the type in the configuration as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Configuration\npublic class ArmeriaConfiguration {\n    // A user can configure the server by providing an ArmeriaServerConfigurator bean.\n    @Bean\n    public ArmeriaServerConfigurator armeriaServerConfigurator() {\n        // Customize the server using the given ServerBuilder. For example:\n        return builder -> {\n            // Add DocService that enables you to send Thrift and gRPC requests\n            // from web browser.\n            builder.serviceUnder(\"/docs\", new DocService());\n\n            // Log every message which the server receives and responds.\n            builder.decorator(LoggingService.newDecorator());\n\n            // Write access log after completing a request.\n            builder.accessLogWriter(AccessLogWriter.combined(), false);\n\n            // You can also bind asynchronous RPC services such as Thrift and gRPC:\n            // builder.service(THttpService.of(...));\n            // builder.service(GrpcService.builder()...build());\n        };\n    }\n}\n`}</code></pre>\n    <p>{`Armeria can also be plugged as the underlying HTTP client for the Spring `}<inlineCode parentName=\"p\">{`WebClient`}</inlineCode>{`. To customize\nclient settings for the Armeria HTTP client, simply define an `}<a parentName=\"p\" {...{\n        \"href\": \"type://ArmeriaClientConfigurator:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/spring/web/reactive/ArmeriaClientConfigurator.html\"\n      }}>{`type://ArmeriaClientConfigurator`}</a>{` bean\nin your configuration as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Configuration\npublic class ArmeriaConfiguration {\n    // Returns a custom ClientFactory with TLS certificate validation disabled,\n    // which means any certificate received from the server will be accepted\n    // without any verification. It is used for an example which makes the client\n    // send an HTTPS request to the server running on localhost with a self-signed\n    // certificate. Do NOT use ClientFactory.insecure() or\n    // ClientFactoryBuilder.tlsNoVerify() in production.\n    @Bean\n    public ClientFactory clientFactory() {\n        return ClientFactory.insecure();\n    }\n\n    // A user can configure a Client by providing an ArmeriaClientConfigurator bean.\n    @Bean\n    public ArmeriaClientConfigurator\n            armeriaClientConfigurator(ClientFactory clientFactory) {\n\n        // Customize the client using the given WebClientBuilder. For example:\n        return builder -> {\n            // Use a circuit breaker for each remote host.\n            final CircuitBreakerRule rule =\n                    CircuitBreakerRule.onServerErrorStatus();\n            builder.decorator(CircuitBreakerClient.builder(rule)\n                                                  .newDecorator());\n\n            // Set a custom client factory.\n            builder.factory(clientFactory);\n        };\n    }\n}\n`}</code></pre>\n    <Tip mdxType=\"Tip\">\n      <p>{`If you are not familiar with Spring Boot and Spring WebFlux, please refer to\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.spring.io/spring-boot/docs/current/reference/html/\"\n        }}>{`Spring Boot Reference Guide`}</a>{` and\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html\"\n        }}>{`Web on Reactive Stack`}</a>{`.`}</p>\n    </Tip>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { RouteComponentProps } from '@reach/router';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport docsIndex from '../pages/docs/toc.json';\nimport MdxLayout from './mdx';\n\ninterface DocsLayoutProps extends RouteComponentProps {\n  pageContext: any;\n  pageTitle: string;\n}\n\nconst DocsLayout: React.FC<DocsLayoutProps> = (props) => {\n  const {\n    allMdx: { nodes: candidateMdxNodes },\n  } = useStaticQuery(graphql`\n    query {\n      allMdx(filter: { fileAbsolutePath: { glob: \"**/src/pages/docs/**\" } }) {\n        nodes {\n          tableOfContents(maxDepth: 1)\n          excerpt(pruneLength: 256, truncate: true)\n          parent {\n            ... on File {\n              sourceInstanceName\n              name\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <MdxLayout\n      {...props}\n      candidateMdxNodes={candidateMdxNodes}\n      index={docsIndex}\n      prefix=\"docs\"\n      pageTitleSuffix=\"Armeria documentation\"\n    />\n  );\n};\n\nexport default DocsLayout;\n"],"sourceRoot":""}