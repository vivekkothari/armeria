(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"Useful links":{"Tutorials":"/tutorials","Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse","server-service-registration"],"Client":["client-http","client-thrift","client-grpc","client-factory","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-streaming-backpressure","advanced-structured-logging-kafka","advanced-metrics","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration","advanced-scala","advanced-scalapb","advanced-client-interoperability"]}')},"6S2g":function(e,t,r){"use strict";r.r(t),r.d(t,"pageTitle",(function(){return o})),r.d(t,"_frontmatter",(function(){return c})),r.d(t,"default",(function(){return d}));var n,a=r("zLVn"),s=(r("q1tI"),r("7ljp")),i=r("xCMr"),o="Sending a streaming response with back pressure",c={},p=(n="Tip",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),Object(s.b)("div",e)}),l={pageTitle:o,_frontmatter:c},m=i.a;function d(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(s.b)(m,Object.assign({},l,r,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"sending-a-streaming-response-with-back-pressure",style:{position:"relative"}},Object(s.b)("a",{parentName:"h1",href:"#sending-a-streaming-response-with-back-pressure","aria-label":"sending a streaming response with back pressure permalink",className:"anchor before"},Object(s.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Sending a streaming response with back pressure"),Object(s.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#sending-a-file-with-back-pressure"},"Sending a file with back pressure")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#sending-a-streaming-response-using-httpresponsewriter"},"Sending a streaming response using HttpResponseWriter"))),Object(s.b)("p",null,"Suppose we want to serve a static file whose size is larger than your available memory. If we load the file into the memory at once, we will definitely get an ",Object(s.b)("inlineCode",{parentName:"p"},"OutOfMemoryError"),"."),Object(s.b)("p",null,"To prevent such error and send large files without consuming too much memory:"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"Divide the file into chunks."),Object(s.b)("li",{parentName:"ol"},"Load the first chunk into memory."),Object(s.b)("li",{parentName:"ol"},"Send the chunk to the client."),Object(s.b)("li",{parentName:"ol"},"Wait until the chunk is written to the sending socket buffer. (See below for explanation.)"),Object(s.b)("li",{parentName:"ol"},"Load the second chunk and repeat the steps 3 and 4 until we send all chunks.")),Object(s.b)("p",null,"Waiting for the chunk to be written is to avoid loading data into memory when the client is not ready to receive. This is called ",Object(s.b)("strong",{parentName:"p"},"back pressure"),".\nSee ",Object(s.b)("a",{parentName:"p",href:"https://engineering.linecorp.com/en/blog/reactive-streams-armeria-1/"},"Let’s Play with Reactive Streams on Armeria - 1")," to learn the conditions under which an ",Object(s.b)("inlineCode",{parentName:"p"},"OutOfMemoryError")," is raised and back pressure which can help you with the error."),Object(s.b)("h2",{id:"sending-a-file-with-back-pressure",style:{position:"relative"}},Object(s.b)("a",{parentName:"h2",href:"#sending-a-file-with-back-pressure","aria-label":"sending a file with back pressure permalink",className:"anchor before"},Object(s.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Sending a file with back pressure"),Object(s.b)("p",null,"To send a file with back pressure, use ",Object(s.b)("a",{parentName:"p",href:"type://HttpFile:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/file/HttpFile.html"},"type://HttpFile"),", which loads and sends file chunks one by one to the client with back pressure."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-java"},'import com.linecorp.armeria.server.Server;\nimport com.linecorp.armeria.server.file.HttpFile;\n\nHttpFile bigFile = HttpFile.of(new File("/var/www/big_file.dat"));\nServer.builder()\n      .service("/big_file.dat", bigFile.asService())\n      .build();\n')),Object(s.b)("h2",{id:"sending-a-streaming-response-using-httpresponsewriter",style:{position:"relative"}},Object(s.b)("a",{parentName:"h2",href:"#sending-a-streaming-response-using-httpresponsewriter","aria-label":"sending a streaming response using httpresponsewriter permalink",className:"anchor before"},Object(s.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Sending a streaming response using HttpResponseWriter"),Object(s.b)("p",null,"To send large data other than files such as database, you need to implement back pressure yourself. Let's start off with implementing a minimal ",Object(s.b)("a",{parentName:"p",href:"type://HttpFile:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/file/HttpFile.html"},"type://HttpFile"),"."),Object(s.b)("p",null,"Prepare to send a streaming response with ",Object(s.b)("a",{parentName:"p",href:"type://HttpResponseWriter:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponseWriter.html"},"type://HttpResponseWriter")," returned by ",Object(s.b)("a",{parentName:"p",href:"type://HttpResponse#streaming():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponse.html#streaming()"},"type://HttpResponse#streaming()"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-java"},'import com.linecorp.armeria.common.HttpData;\nimport com.linecorp.armeria.common.HttpResponse;\nimport com.linecorp.armeria.common.HttpResponseWriter;\nimport com.linecorp.armeria.common.ResponseHeaders;\nimport com.linecorp.armeria.server.ServerBuilder;\n\n// ⚠️ This code has a problem. Do not copy/paste and use it.\nServerBuilder sb = ...;\nsb.service("/big_file.dat", (ctx, req) -> {\n    HttpResponseWriter response = HttpResponse.streaming();\n    // We must write the response headers first.\n    response.write(ResponseHeaders.of(200));\n    response.write(produceChunk(0));\n    response.write(produceChunk(1));\n    response.write(produceChunk(2));\n    ... // Write more chunks until we send all chunks.\n    // Call close() to end the response.\n    response.close();\n    return response;\n}\n\n...\nprivate HttpData produceChunk(int index) {\n    // Divide the file by the pre-defined chunk size(e.g. 8192 bytes)\n    // and read it using index.\n    // If index is 0, 0 to 8192 bytes from the file is read.\n    // If index is 1, 8193 to 16384 is read and so on.\n}\n')),Object(s.b)("p",null,"With the code above, the server would encounter ",Object(s.b)("inlineCode",{parentName:"p"},"OutOfMemoryError"),". We still need to take care of preventing loading data chunks into memory before a chunk is sent to the client. To solve the problem, implement back pressure with ",Object(s.b)("a",{parentName:"p",href:"type://StreamWriter#whenConsumed():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/stream/StreamWriter.html#whenConsumed()"},"type://StreamWriter#whenConsumed()"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-java"},'sb.service("/big_file.dat", (ctx, req) -> {\n    HttpResponseWriter response = HttpResponse.streaming();\n    response.write(ResponseHeaders.of(200));\n    response.whenConsumed().thenRun(() -> {\n        // Produce the first chunk when the ResponseHeaders is\n        // written to the socket.\n        response.write(produceChunk(0));\n        response.whenConsumed().thenRun(() -> {\n            // Produce the second chunk when the first chunk is\n            // written to the socket.\n            response.write(produceChunk(1));\n            ...\n        });\n    });\n    return response;\n});\n')),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"type://StreamWriter#whenConsumed():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/stream/StreamWriter.html#whenConsumed()"},"type://StreamWriter#whenConsumed()")," returns a ",Object(s.b)("inlineCode",{parentName:"p"},"CompletableFuture")," that is complete when the chunk written to the ",Object(s.b)("a",{parentName:"p",href:"type://HttpResponseWriter:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponseWriter.html"},"type://HttpResponseWriter")," is finally written to the socket. This enables you to add the next task by adding a callback (",Object(s.b)("inlineCode",{parentName:"p"},"thenRun()")," in the code example). The next task in the example is set to produce the next chunk."),Object(s.b)(p,{mdxType:"Tip"},Object(s.b)("p",null,"See ",Object(s.b)("a",{parentName:"p",href:"https://engineering.linecorp.com/en/blog/reactive-streams-armeria-2/"},"Let’s Play with Reactive Streams on Armeria - 2")," to learn how network layer plays in with back pressure.")),Object(s.b)("p",null,"Of course, we would need to use recursion to be free from infinite implementation of the callback."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-java"},'sb.service("/big_file.dat", (ctx, req) -> {\n    HttpResponseWriter response = HttpResponse.streaming();\n    response.write(ResponseHeaders.of(200));\n    streamingResponse(response, 0);\n    return response;\n});\n\nprivate void streamingResponse(HttpResponseWriter response, int index) {\n    if (isEndOfFile()) {\n        // Close the response when we send all chunks.\n        response.close();\n        return;\n    }\n    response.whenConsumed().thenRun(() -> {\n        if (response.tryWrite(produceChunk(index))) {\n            streamingResponse(response, index + 1);\n        } else {\n            // The response is completed unexpectedly.\n        }\n    });\n}\n')),Object(s.b)("p",null,"So far, we have implemented a simple version of ",Object(s.b)("a",{parentName:"p",href:"type://HttpFile:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/file/HttpFile.html"},"type://HttpFile"),". Now, we can implement a streaming response with back pressure for any type of source (e.g. database) by simply changing the ",Object(s.b)("inlineCode",{parentName:"p"},"produceChunk()")," method to fetch data from the source."),Object(s.b)("p",null,"You have other alternatives to implement back pressure with; there are libraries such as ",Object(s.b)("a",{parentName:"p",href:"https://projectreactor.io"},"Reactor")," and ",Object(s.b)("a",{parentName:"p",href:"https://github.com/ReactiveX/RxJava"},"RxJava"),". If you opt to use such alternative,\nreturn the response using ",Object(s.b)("a",{parentName:"p",href:"type://HttpResponse#of(ResponseHeaders,Publisher):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponse.html#of(com.linecorp.armeria.common.ResponseHeaders,org.reactivestreams.Publisher)"},"type://HttpResponse#of(ResponseHeaders,Publisher)"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-java"},'sb.service("/big_data.dat", (ctx, req) -> {\n    Flux<HttpData> flux = ... // Fetch data from other source with backpressure.\n    return HttpResponse.of(ResponseHeaders.of(200), flux);\n});\n')),Object(s.b)(p,{mdxType:"Tip"},Object(s.b)("p",null,"Have a go at experimenting with a rather ",Object(s.b)("a",{parentName:"p",href:"https://github.com/line/armeria-examples/blob/master/proxy-server/src/main/java/example/armeria/proxy/AnimationService.java"},"fun working example")," that sends a streaming response with back pressure.")))}d.isMDXComponent=!0},xCMr:function(e,t,r){"use strict";var n=r("Wbzz"),a=r("q1tI"),s=r.n(a),i=r("/94A"),o=r("+ejy");t.a=function(e){var t=Object(n.useStaticQuery)("1217743243").allMdx.nodes;return s.a.createElement(o.a,Object.assign({},e,{candidateMdxNodes:t,index:i,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-streaming-backpressure-mdx-8cb6b90abc7baa1841bf.js.map