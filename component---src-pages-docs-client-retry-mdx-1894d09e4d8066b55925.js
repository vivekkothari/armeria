(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"Useful links":{"Tutorials":"/tutorials","Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse","server-service-registration"],"Client":["client-http","client-thrift","client-grpc","client-factory","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-streaming-backpressure","advanced-structured-logging-kafka","advanced-metrics","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration","advanced-scala","advanced-scalapb","advanced-client-interoperability"]}')},xCMr:function(e,t,a){"use strict";var r=a("Wbzz"),n=a("q1tI"),i=a.n(n),o=a("/94A"),c=a("+ejy");t.a=function(e){var t=Object(r.useStaticQuery)("1217743243").allMdx.nodes;return i.a.createElement(c.a,Object.assign({},e,{candidateMdxNodes:t,index:o,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}},xex8:function(e,t,a){"use strict";a.r(t),a.d(t,"pageTitle",(function(){return o})),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return d}));var r=a("zLVn"),n=(a("q1tI"),a("7ljp")),i=a("xCMr"),o="Automatic retry",c={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(n.b)("div",t)}},p=l("Warning"),m=l("Tip"),s={pageTitle:o,_frontmatter:c},b=i.a;function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(n.b)(b,Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"automatic-retry",style:{position:"relative"}},Object(n.b)("a",{parentName:"h1",href:"#automatic-retry","aria-label":"automatic retry permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Automatic retry"),Object(n.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#retryingclient"},"RetryingClient")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#retryrule"},"RetryRule")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#backoff"},"Backoff")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#maxtotalattempts-vs-per-backoff-maxattempts"},"maxTotalAttempts vs per-Backoff maxAttempts")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#per-attempt-timeout"},"Per-attempt timeout")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#retryingclient-with-logging"},"RetryingClient with logging")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#retryingclient-with-circuit-breaker"},"RetryingClient with circuit breaker")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"#see-also"},"See also"))),Object(n.b)("p",null,"When a client gets an error response, it might want to retry the request depending on the response.\nThis can be accomplished using a ",Object(n.b)("a",{parentName:"p",href:"/docs/client-decorator"},"decorator"),", and Armeria provides the following\nimplementations out-of-the box."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"type://RetryingRpcClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingRpcClient.html"},"type://RetryingRpcClient"))),Object(n.b)("p",null,"Both behave the same except for the different request and response types.\nSo, let's find out what we can do with ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient"),"."),Object(n.b)("h2",{id:"retryingclient",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#retryingclient","aria-label":"retryingclient permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryingClient")),Object(n.b)("p",null,"You can just use the ",Object(n.b)("inlineCode",{parentName:"p"},"decorator()")," method in ",Object(n.b)("a",{parentName:"p",href:"type://ClientBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientBuilder.html"},"type://ClientBuilder")," or ",Object(n.b)("a",{parentName:"p",href:"type://WebClientBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/WebClientBuilder.html"},"type://WebClientBuilder")," to build a\n",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient"),". For example:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},'import com.linecorp.armeria.client.WebClient;\nimport com.linecorp.armeria.client.retry.RetryingClient;\nimport com.linecorp.armeria.client.retry.RetryRule;\nimport com.linecorp.armeria.common.AggregatedHttpResponse;\n\nRetryRule rule = RetryRule.failsafe();\nWebClient client = WebClient.builder("http://example.com/hello")\n                            .decorator(RetryingClient.newDecorator(rule))\n                            .build();\n\nAggregatedHttpResponse res = client.execute(...).aggregate().join();\n')),Object(n.b)("p",null,"That's it. The client will keep attempting until it succeeds or the number of attempts exceeds the maximum\nnumber of total attempts. You can configure the ",Object(n.b)("inlineCode",{parentName:"p"},"maxTotalAttempts")," when making the decorator using\n",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient#newDecorator(RetryRule,int):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html#newDecorator(com.linecorp.armeria.client.retry.RetryRule,int)"},"type://RetryingClient#newDecorator(RetryRule,int)"),". Meanwhile, the ",Object(n.b)("inlineCode",{parentName:"p"},"rule")," will decide to\nretry depending on the response. In this case, the client retries when it receives ",Object(n.b)("inlineCode",{parentName:"p"},"5xx")," response error or\nan exception is raised."),Object(n.b)("h2",{id:"retryrule",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#retryrule","aria-label":"retryrule permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryRule")),Object(n.b)("p",null,"You can fluently build your own :api:",Object(n.b)("inlineCode",{parentName:"p"},"RetryRule"),"."),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.client.ResponseTimeoutException;\nimport com.linecorp.armeria.common.HttpStatus;\n\nBackoff myBackoff = ...;\nRetryRule.of(RetryRule.builder().onUnProcessed().thenBackoff(myBackoff),\n             RetryRule.builder().onException(ResponseTimeoutException.class).thenBackoff(),\n             RetryRule.builder().onStatus(HttpStatus.TOO_MANY_REQUESTS).thenNoRetry())\n")),Object(n.b)("p",null,"Or you can customize the ",Object(n.b)("strong",{parentName:"p"},"rule")," by implementing :api:",Object(n.b)("inlineCode",{parentName:"p"},"RetryRule"),"."),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.client.ClientRequestContext;\nimport com.linecorp.armeria.client.UnprocessedRequestException;\nimport com.linecorp.armeria.client.retry.Backoff;\nimport com.linecorp.armeria.client.retry.RetryDecision;\nimport com.linecorp.armeria.common.ResponseHeaders;\nimport com.linecorp.armeria.common.logging.RequestLogProperty;\n\nnew RetryRule() {\n    Backoff backoff = Backoff.ofDefault();\n\n    @Override\n    public CompletionStage<RetryDecision> shouldRetry(ClientRequestContext ctx,\n                                                      @Nullable Throwable cause) {\n        if (cause != null) {\n            if (cause instanceof ResponseTimeoutException ||\n                cause instanceof UnprocessedRequestException) {\n                // The response timed out or the request has not been handled\n                // by the server.\n                return CompletableFuture.completedFuture(RetryDecision.retry(backoff));\n            }\n        }\n\n        ResponseHeaders responseHeaders = ctx.log().ensureAvailable(RequestLogProperty.RESPONSE_HEADERS)\n                                             .responseHeaders();\n        if (responseHeaders.status() == HttpStatus.TOO_MANY_REQUESTS) {\n            return CompletableFuture.completedFuture(RetryDecision.stop());\n        }\n\n        // Return 'next()' to lookup other rules.\n        return CompletableFuture.completedFuture(RetryDecision.next());\n    }\n};\n")),Object(n.b)("p",null,"This will retry when one of ",Object(n.b)("a",{parentName:"p",href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"},"type://ResponseTimeoutException")," and ",Object(n.b)("a",{parentName:"p",href:"type://UnprocessedRequestException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/UnprocessedRequestException.html"},"type://UnprocessedRequestException")," is raised\nor the response's status is ",Object(n.b)("inlineCode",{parentName:"p"},"429 Too Many Requests"),"."),Object(n.b)(p,{mdxType:"Warning"},Object(n.b)("p",null,"We declare a ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," as a member and reuse it when a ",Object(n.b)("inlineCode",{parentName:"p"},"rule")," returns it, so that we do not\nreturn a different ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," instance for each ",Object(n.b)("inlineCode",{parentName:"p"},"shouldRetry()"),". ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient"),"\ninternally tracks the reference of the returned ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," and increases the counter that keeps\nthe number of attempts made so far, and resets it to 0 when the ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," returned by the retry rule\nis not the same as before. Therefore, it is important to return the same ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," instance unless\nyou decided to change your ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," strategy. If you do not return the same one, when the\n",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," yields a different delay based on the number of retries, such as an exponential backoff,\nit will not work as expected. We will take a close look into a ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," at the next section.")),Object(n.b)(m,{mdxType:"Tip"},Object(n.b)("p",null,Object(n.b)("a",{parentName:"p",href:"type://UnprocessedRequestException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/UnprocessedRequestException.html"},"type://UnprocessedRequestException")," literally means that the request has not been processed by the server.\nTherefore, you can safely retry the request without worrying about the idempotency of the request.\nFor more information about idempotency, please refer to\n",Object(n.b)("a",{parentName:"p",href:"http://restcookbook.com/HTTP%20Methods/idempotency/"},"What are idempotent and/or safe methods?"),".")),Object(n.b)("p",null,"You can return a different ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," according to the response status."),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.common.HttpStatusClass;\n\nBackoff backoffOnServerErrorOrTimeout = Backoff.ofDefault();\nBackoff backoffOnConflict = Backoff.fixed(100);\nRetryRule.builder()\n         .onException(ex -> ex instanceof ResponseTimeoutException ||\n                            ex instanceof UnprocessedRequestException)\n         .thenBackoff(backoffOnServerErrorOrTimeout)\n         .orElse(RetryRule.builder()\n                          .onStatusClass(HttpStatusClass.SERVER_ERROR)\n                          .thenBackoff(backoffOnServerErrorOrTimeout))\n         .orElse(RetryRule.builder()\n                          .onStatus(HttpStatus.CONFLICT)\n                          .thenBackoff(backoffOnConflict));\n")),Object(n.b)("p",null,"If you need to determine whether you need to retry by looking into the response content, you should implement\n",Object(n.b)("a",{parentName:"p",href:"type://RetryRuleWithContent:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRuleWithContent.html"},"type://RetryRuleWithContent")," and specify it when you create a ",Object(n.b)("a",{parentName:"p",href:"type://WebClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/WebClient.html"},"type://WebClient"),"\nusing ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClientBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClientBuilder.html"},"type://RetryingClientBuilder"),":"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},'import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n\nRetryRuleWithContent<HttpResponse> retryRule =\n        RetryRuleWithContent\n                .<HttpResponse>builder()\n                .onException(ex -> ex instanceof ResponseTimeoutException ||\n                                   ex instanceof UnprocessedRequestException)\n                .onResponse(response -> {\n                    return response.aggregate()\n                                   .thenApply(content -> "Should I retry?".equals(content.contentUtf8()));\n                })\n                .thenBackoff(backoff);\n\n// Create a WebClient with a retry rule.\nWebClient client = WebClient\n        .builder(...)\n        .decorator(RetryingClient.builder(retryRule)\n                                 .newDecorator())\n        .build();\n\nAggregatedHttpResponse res = client.execute(...).aggregate().join();\n')),Object(n.b)(m,{mdxType:"Tip"},Object(n.b)("p",null,"You might find the ",Object(n.b)("a",{parentName:"p",href:"type://Exceptions#peel(Throwable):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/util/Exceptions.html#peel(java.lang.Throwable)"},"type://Exceptions#peel(Throwable)")," method useful when the exception you are trying to\nhandle is wrapped by exceptions like ",Object(n.b)("inlineCode",{parentName:"p"},"CompletionException")," and ",Object(n.b)("inlineCode",{parentName:"p"},"ExecutionException"),":"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.common.Exceptions;\n\n@Override\npublic CompletionStage<RetryDecision> shouldRetry(ClientRequestContext ctx,\n                                                  @Nullable Throwable cause) {\n    if (cause != null) {\n        if (cause instanceof ResponseTimeoutException ||\n            cause instanceof UnprocessedRequestException) {\n            // The response timed out or the request has not been handled\n            // by the server.\n            return CompletableFuture.completedFuture(backoff);\n        }\n\n        Throwable peeled = Exceptions.peel(cause);\n        if (peeled instanceof MyException) { ... }\n    }\n    ...\n}\n"))),Object(n.b)("h2",{id:"backoff",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#backoff","aria-label":"backoff permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),Object(n.b)("inlineCode",{parentName:"h2"},"Backoff")),Object(n.b)("p",null,"You can use a ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," to determine the delay between attempts. Armeria provides ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff"),"\nimplementations which produce the following delays out of the box:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Fixed delay, created with ",Object(n.b)("a",{parentName:"li",href:"type://Backoff#fixed(long):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#fixed(long)"},"type://Backoff#fixed(long)")),Object(n.b)("li",{parentName:"ul"},"Random delay, created with ",Object(n.b)("a",{parentName:"li",href:"type://Backoff#random(long,long):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#random(long,long)"},"type://Backoff#random(long,long)")),Object(n.b)("li",{parentName:"ul"},"Exponential delay which is multiplied on each attempt, created with ",Object(n.b)("a",{parentName:"li",href:"type://Backoff#exponential(long,long):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#exponential(long,long)"},"type://Backoff#exponential(long,long)"))),Object(n.b)("p",null,"Armeria provides ",Object(n.b)("a",{parentName:"p",href:"type://Backoff#ofDefault():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#ofDefault()"},"type://Backoff#ofDefault()")," that you might use by default. It is exactly the same as:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"Backoff.exponential(200   /* minDelayMillis */,\n                    10000 /* maxDelayMillis */,\n                    2.0   /* multiplier     */)\n       .withJitter(0.2 /* jitterRate */);\n")),Object(n.b)("p",null,"The delay starts from ",Object(n.b)("inlineCode",{parentName:"p"},"minDelayMillis")," until it reaches ",Object(n.b)("inlineCode",{parentName:"p"},"maxDelayMillis")," multiplying by multiplier every\nretry. Please note that the ",Object(n.b)("a",{parentName:"p",href:"type://Backoff#withJitter(double):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#withJitter(double)"},"type://Backoff#withJitter(double)")," will add jitter value to the calculated delay."),Object(n.b)("p",null,"For more information, please refer to the API documentation of the\n",Object(n.b)("a",{parentName:"p",href:"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/package-summary.html"},"com.linecorp.armeria.client.retry")," package."),Object(n.b)("h2",{id:"maxtotalattempts-vs-per-backoff-maxattempts",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#maxtotalattempts-vs-per-backoff-maxattempts","aria-label":"maxtotalattempts vs per backoff maxattempts permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),Object(n.b)("inlineCode",{parentName:"h2"},"maxTotalAttempts")," vs per-Backoff ",Object(n.b)("inlineCode",{parentName:"h2"},"maxAttempts")),Object(n.b)("p",null,"If you create a ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," using ",Object(n.b)("a",{parentName:"p",href:"type://Backoff#withMaxAttempts(int):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#withMaxAttempts(int)"},"type://Backoff#withMaxAttempts(int)")," in a ",Object(n.b)("a",{parentName:"p",href:"type://RetryRule:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRule.html"},"type://RetryRule"),",\nthe ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," which uses the ",Object(n.b)("a",{parentName:"p",href:"type://RetryRule:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRule.html"},"type://RetryRule")," will stop retrying when the number of\nattempts passed ",Object(n.b)("inlineCode",{parentName:"p"},"maxAttempts"),". However, if you have more than one ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," and return one after\nthe other continuously, it will keep retrying over and over again because the counter that\n",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," internally tracks is initialized every time the different ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," is\nreturned. To limit the number of attempts in a whole retry session, ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," limits\nthe maximum number of total attempts to 10 by default. You can change this value by specifying\n",Object(n.b)("inlineCode",{parentName:"p"},"maxTotalAttempts")," when you build a ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient"),":"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"RetryingClient.newDecorator(rule, maxTotalAttempts);\n")),Object(n.b)("p",null,"Or, you can override the default value of 10 using the JVM system property\n",Object(n.b)("inlineCode",{parentName:"p"},"-Dcom.linecorp.armeria.defaultMaxTotalAttempts=<integer>"),"."),Object(n.b)("p",null,"Note that when a ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," stops due to the attempts limit, the client will get the last received\n",Object(n.b)("a",{parentName:"p",href:"type://Response:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/Response.html"},"type://Response")," from the server."),Object(n.b)("h2",{id:"per-attempt-timeout",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#per-attempt-timeout","aria-label":"per attempt timeout permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Per-attempt timeout"),Object(n.b)("p",null,Object(n.b)("a",{parentName:"p",href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"},"type://ResponseTimeoutException")," can occur in two different situations while retrying. First, it occurs\nwhen the time of whole retry session has passed the time previously configured using:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"ClientBuilder.responseTimeoutMillis(millis);\n// or..\nClientRequestContext.setResponseTimeoutAfterMillis(millis);\n")),Object(n.b)("p",null,"You cannot retry on this ",Object(n.b)("a",{parentName:"p",href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"},"type://ResponseTimeoutException"),".\nSecond, it occurs when the time of individual attempt in retry has passed the time which is per-attempt timeout.\nYou can configure it when you create the decorator:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"RetryingClient.newDecorator(rule, maxTotalAttempts,\n                            responseTimeoutMillisForEachAttempt);\n")),Object(n.b)("p",null,"You can retry on this ",Object(n.b)("a",{parentName:"p",href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"},"type://ResponseTimeoutException"),"."),Object(n.b)("p",null,"For example, when making a retrying request to an unresponsive service\nwith ",Object(n.b)("inlineCode",{parentName:"p"},"responseTimeoutMillis = 10,000"),", ",Object(n.b)("inlineCode",{parentName:"p"},"responseTimeoutMillisForEachAttempt = 3,000")," and disabled\n",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff"),", the first three attempts will be timed out by the per-attempt timeout (3,000ms).\nThe 4th one will be aborted after 1,000ms since the request session has reached at 10,000ms before\nit is timed out by the per-attempt timeout."),Object(n.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(n.b)("object",{parentName:"span",data:"/a40f882a8c864c5187831b5d808cf9ca91c97cbb.svg",role:"img","aria-label":""})),Object(n.b)("p",null,"In the example above, every attempt is made before it is timed out because the ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," is disabled.\nHowever, what if a ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," is enabled and the moment of trying next attempt is after the point of\n",Object(n.b)("a",{parentName:"p",href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"},"type://ResponseTimeoutException"),"? In such a case, the ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," does not schedule for the\nnext attempt, but finishes the retry session immediately with the last received ",Object(n.b)("a",{parentName:"p",href:"type://Response:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/Response.html"},"type://Response"),".\nConsider the following example:"),Object(n.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(n.b)("object",{parentName:"span",data:"/054162a9ab5eca026f5db10e21f107cc61cf860f.svg",role:"img","aria-label":""})),Object(n.b)("p",null,"Unlike the example above, the ",Object(n.b)("a",{parentName:"p",href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"},"type://Backoff")," is enabled and it makes the ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," perform\nretries with 3-second delay. When the second attempt is finished at 9,000ms, the next attempt will be\nat 12,000ms exceeding the response timeout of 10,000ms.\nThe ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient"),", at this point, stops retrying and finished the retry session with the last\nreceived ",Object(n.b)("a",{parentName:"p",href:"type://Response:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/Response.html"},"type://Response"),", retrieved at 9,000ms from the attempt 2."),Object(n.b)("h2",{id:"retryingclient-with-logging",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#retryingclient-with-logging","aria-label":"retryingclient with logging permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryingClient")," with logging"),Object(n.b)("p",null,"You can use ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," with ",Object(n.b)("a",{parentName:"p",href:"type://LoggingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/logging/LoggingClient.html"},"type://LoggingClient")," to log. If you want to log all of the\nrequests and responses, decorate ",Object(n.b)("a",{parentName:"p",href:"type://LoggingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/logging/LoggingClient.html"},"type://LoggingClient")," with ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient"),". That is:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"RetryRule rule = RetryRule.failsafe();\nWebClient client = WebClient.builder(...)\n                            .decorator(LoggingClient.newDecorator())\n                            .decorator(RetryingClient.newDecorator(rule))\n                            .build();\n")),Object(n.b)("p",null,"This will produce following logs when there are three attempts:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre"},"Request: {startTime=..., length=..., duration=..., scheme=..., host=..., headers=[...]\nResponse: {startTime=..., length=..., duration=..., headers=[:status=500, ...]\nRequest: {startTime=..., ..., headers=[..., armeria-retry-count=1, ...]\nResponse: {startTime=..., length=..., duration=..., headers=[:status=500, ...]\nRequest: {startTime=..., ..., headers=[..., armeria-retry-count=2, ...]\nResponse: {startTime=..., length=..., duration=..., headers=[:status=200, ...]\n")),Object(n.b)(m,{mdxType:"Tip"},Object(n.b)("p",null,"Did you notice that the ",Object(n.b)("inlineCode",{parentName:"p"},"armeria-retry-count")," header is inserted from the second request?\n",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," inserts it to indicate the retry count of a request.\nThe server might use this value to reject excessive retries, etc.")),Object(n.b)("p",null,"If you want to log the first request and the last response, no matter if it's successful or not,\ndo the reverse:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.client.logging.LoggingClient;\n\nRetryRule rule = RetryRule.failsafe();\n// Note the order of decoration.\nWebClient client = WebClient.builder(...)\n                            .decorator(RetryingClient.newDecorator(rule))\n                            .decorator(LoggingClient.newDecorator())\n                            .build();\n")),Object(n.b)("p",null,"This will produce single request and response log pair and the total number of attempts only, regardless\nhow many attempts are made:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre"},"Request: {startTime=..., length=..., duration=..., scheme=..., host=..., headers=[...]\nResponse: {startTime=..., length=..., headers=[:status=200, ...]}, {totalAttempts=3}\n")),Object(n.b)(m,{mdxType:"Tip"},Object(n.b)("p",null,"Please refer to ",Object(n.b)("a",{parentName:"p",href:"/docs/advanced-structured-logging#nested-log"},"Nested log"),",\nif you are curious about how this works internally.")),Object(n.b)("h2",{id:"retryingclient-with-circuit-breaker",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#retryingclient-with-circuit-breaker","aria-label":"retryingclient with circuit breaker permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryingClient")," with circuit breaker"),Object(n.b)("p",null,"You might want to use ",Object(n.b)("a",{parentName:"p",href:"/docs/client-circuit-breaker"},"Circuit breaker")," with ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," using\n",Object(n.b)("a",{parentName:"p",href:"/docs/client-decorator"},"Decorating a client"),":"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRule;\nimport com.linecorp.armeria.client.circuitbreaker.CircuitBreakerClientBuilder;\n\nCircuitBreakerRule cbRule = CircuitBreakerRule.onServerErrorStatus();\nRetryRule myRetryRule = RetryRule.builder()\n                                 ...\n                                 .build();\n\nWebClient client = WebClient.builder(...)\n                            .decorator(CircuitBreakerClient.builder(cbRule)\n                                                           .newDecorator())\n                            .decorator(RetryingClient.builder(myRetryRule)\n                                                     .newDecorator())\n                            .build();\n\nAggregatedHttpResponse res = client.execute(...).aggregate().join();\n")),Object(n.b)("p",null,"This decorates ",Object(n.b)("a",{parentName:"p",href:"type://CircuitBreakerClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.html"},"type://CircuitBreakerClient")," with ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," so that the ",Object(n.b)("a",{parentName:"p",href:"type://CircuitBreaker:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/CircuitBreaker.html"},"type://CircuitBreaker"),"\njudges every request and retried request as successful or failed. If the failure rate exceeds a certain\nthreshold, it raises a ",Object(n.b)("a",{parentName:"p",href:"type://FailFastException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/FailFastException.html"},"type://FailFastException"),". When using both clients, you need to build a custom\n",Object(n.b)("a",{parentName:"p",href:"type://RetryRule:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRule.html"},"type://RetryRule")," to handle this exception so that the ",Object(n.b)("a",{parentName:"p",href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"},"type://RetryingClient")," does not attempt\na retry unnecessarily when the circuit is open, e.g."),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"import com.linecorp.armeria.client.circuitbreaker.FailFastException;\n\nRetryRule.of(RetryRule.builder()\n                      // The circuit is already open so stops retrying.\n                      .onException(FailFastException.class)\n                      .thenNoRetry(),\n             RetryRule.builder()\n                      .onException(ex -> ex instanceof ResponseTimeoutException ||\n                                         ex instanceof UnprocessedRequestException)\n                      .thenBackoff(),\n             // Implement the rest of your own rule.\n             ...);\n")),Object(n.b)(m,{mdxType:"Tip"},Object(n.b)("p",null,"You may want to allow retrying even on ",Object(n.b)("a",{parentName:"p",href:"type://FailFastException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/FailFastException.html"},"type://FailFastException")," when your endpoint is configured with\nclient-side load balancing because the next attempt might be sent to the next available endpoint.\nSee ",Object(n.b)("a",{parentName:"p",href:"/docs/client-service-discovery"},"Client-side load balancing and service discovery"),"\nfor more information.")),Object(n.b)("h2",{id:"see-also",style:{position:"relative"}},Object(n.b)("a",{parentName:"h2",href:"#see-also","aria-label":"see also permalink",className:"anchor before"},Object(n.b)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},Object(n.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"See also"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"/docs/advanced-structured-logging"},"Structured logging"))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docs-client-retry-mdx-1894d09e4d8066b55925.js.map